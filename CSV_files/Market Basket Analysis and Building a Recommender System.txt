# Load required libraries
library(arules)       # For association rule mining
library(arulesViz)    # For visualizing association rules
library(recommenderlab) # For collaborative filtering and recommender systems

# Step 1: Load Transactional Data
# Simulated example or use an actual dataset (Groceries dataset as example)
# You can replace the dataset URL with your own transactional data.
data_url <- "https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/groceries.csv"
transactions <- read.transactions(data_url, format = "basket", sep = ",")

# View summary of the dataset
summary(transactions)
# Output: Shows the number of transactions, distinct items, and sparsity

# Step 2: Perform Market Basket Analysis (Association Rule Mining)
# Use the Apriori algorithm to find frequent itemsets
rules <- apriori(transactions, parameter = list(supp = 0.01, conf = 0.5))

# Inspect top 10 rules sorted by lift
top_rules <- head(sort(rules, by = "lift"), 10)
inspect(top_rules)

# Step 3: Visualize Association Rules
# Graph visualization of rules
plot(top_rules, method = "graph", control = list(type = "items"))

# Step 4: Build a Recommender System Using Collaborative Filtering
# Load a sample ratings dataset (MovieLens dataset for demonstration)
data("MovieLense")
ratings <- MovieLense[1:500, ]  # Subset for faster computation

# Step 4.1: Create a User-Based Collaborative Filtering Recommender System
user_rec <- Recommender(ratings, method = "UBCF")  # User-based collaborative filtering

# Step 4.2: Generate Recommendations for the First 10 Users
recommendations <- predict(user_rec, ratings[1:10, ], n = 5)  # Recommend top 5 items per user

# Convert recommendations to a readable list format
recommendation_list <- as(recommendations, "list")
print(recommendation_list)

# Step 5: Visualize Results and Evaluate Insights
# Visualization for Market Basket Analysis
itemFrequencyPlot(transactions, topN = 10, type = "absolute", col = "blue",
                  main = "Top 10 Purchased Items", xlab = "Items", ylab = "Frequency")

# Additional Steps for Evaluation
# Evaluate the recommendation system using metrics like precision and recall
evaluation <- evaluationScheme(ratings, method = "split", train = 0.8, given = 3, goodRating = 4)
eval_results <- evaluate(evaluation, method = "UBCF", type = "topNList", n = 5)

# View the evaluation metrics
print(eval_results)

